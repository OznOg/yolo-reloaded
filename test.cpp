#include "Layer.hpp"
#include <fstream>
#include <iostream>
#include <vector>

#include "gtest/gtest.h"

std::vector<float> input = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,

                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                             0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

TEST(Layers, Convolutional) {
    yolo::ConvolutionalLayer cl(true, 2, 3, 1, 1, yolo::Activation::Leaky);

    cl.setInputFormat(yolo::Format(10, 10, 2, 1));

    float values[] = {4.67705441, 0.809119403, 1.43724489, 2.85755491, 2.19511652,
        0.881083131, 3.35124207, 1.6095494, 1.49180412, 3.99106145, 1.08627033,
        1.50927877, 1.51597345, 1.26647806, 0.989533722, 2.0820756, 2.05011702,
        1.16349792, 1.39087749, 2.92647028, 1.24174178, 1.37836969, 1.70288861,
        1.45406938, 1.59529889, 0.718009293, 1.15835619, 1.33080423, 1.22939992,
        2.65495729, 1.19580281, 2.69484043, -0.727727473, 0.0279054791, -0.0758831874,
        0.225078747, -0.88117379, 0.0103173712, -0.79150486, -0.0403848439,
        0.0615045838, -0.769501448, -0.182791889, -0.0738272443, 0.0514899567,
        0.0358174816, -0.00282045198, 0.0243403725, -0.195123821, 0.245883629,
        -0.426652253, -0.802849531, -0.390051126, 0.0512170978, 0.377772778,
        0.0681747347, -0.0208976027, -0.111072846, 0.0762804672, -0.151806653,
        -0.112165615, -0.401287287, -0.20964469, 0.42425555, 0.126779407, 0.0247305408,
        0.119963393, 0.0135172568, 0.202162609, 0.00812942721, 0.164260969,
        0.0390304364, 0.193880856, 0.142701566, 0.0120635275, 0.125746384, 0.28081879,
        0.098079972, 0.0053083254, 0.00247807335, 0.308083683, 0.0703106597,
        0.0533534251, 0.187784791, 0.0378001295, 0.148594499, 0.0342221037,
        0.146226883, 0.0297209192, 0.00340324757, 0.262888283, 0.174892783,
        0.0843526274, 0.0513524115, 0.0844872519, 0.0498107113, 
        -0.0585820116, -0.0938492566, 0.00536382152, -0.296972454, -0.319799662,
        -0.28978008, -0.020974949, -0.104309045, -0.0716369376, 0.00796936452,
        0.00855345279, 0.00144491252, -0.0384519994, -0.0151507556, -0.0785496831,
        0.0166236646, 0.0122606065, -0.022692794, -0.048570618, -0.0189695694,
        0.00418597134, -0.0977001861, -0.00435404759, -0.0278097317, -0.0103285033,
        0.0240961015, 0.0381285846, -0.919402122, 0.894873083, -0.00208671158,
        0.925246298, -0.875181377, -0.0439637043, 0.0201880038, -0.0512917899,
        0.0150064444, -1.18751359, 1.07393706, 0.0616165698, 1.08835006, -1.02906942,
        -0.0616641305, 0.0417576469, -0.0150056919, 0.0317096487, -0.695328891,
        0.739544153, 0.0538189299, 0.765476584, -0.707936764, -0.0389839895,
        -0.00638114102, -0.00713108387, -0.00668395218, 1.08703125, 0.1162128,
        -0.381832391, 1.01772642, -0.779491246, -0.64496088, 0.434600174, -0.823167801,
        -0.128245831, 0.928477287, 0.162829235, -0.209824786, 0.854118228,
        -0.817508459, -0.437632173, 0.160523057, -0.74374187, 0.142559066, 0.34222731,
        0.0447630957, -0.10071224, 0.385944575, -0.397532731, -0.182016417,
        0.137207106, -0.382964343, 0.0602134988, -0.0477864332, 0.318636507,
        0.0669184178, -0.147600621, -0.340080023, 0.0767155364, 0.360883415,
        0.0143462084, -0.0924571157, 0.0564380884, 0.0875861272, 0.278141677,
        -0.0706924796, 0.149025843, 0.0496744663, -0.259312242, -0.172608897,
        0.00449285936, 0.0376147963, -0.552414954, -0.335256606, 0.354726434,
        0.646098912, -0.237723783, -0.175385207, 0.191795915, 0.213089705,
        0.0607924052, 0.0208229721, 0.0158085786, 0.0704208538, 0.0366166271,
        -0.0260951407, 0.0490752347, -0.347816199, -0.599340975, 0.00867455453,
        -0.0469755232, 0.0146069489, -0.00971144065, -0.076963298, -0.0270721894,
        -0.0106609669, -0.30922389, -0.489850551, 0.0197651871, 0.0309036095,
        0.0392006263, 0.0495567583, 0.125765592, 0.0970806926, 0.0973272696,
        -0.184043288, -0.458376586, -0.48874414, -0.0424413309, 0.534097254,
        -0.880568683, -0.303222746, 1.2113502, -0.469962865, -0.252613157, 0.64811784,
        0.059301123, 0.0020057864, -0.117587179, 0.19089061, 0.0575573333,
        -0.271245718, 0.17201516, 0.0892850235, -0.120327376, 0.484434962,
        0.0595265031, -0.534944296, 0.788278103, 0.303604603, -1.10799217, 0.399164766,
        0.195216924, -0.583036423, -0.161003023, 0.0835048407, 0.178297743,
        -0.502113521, -0.176540241, 0.174348161, 0.0135719124, -0.0202022418,
        0.0881318599, -0.185713351, -0.16290611, -0.127820969, -0.381089061,
        -0.239715725, -0.119215481, -0.0541586205, -0.0528512597, -0.0479593538,
        0.0642153323, 0.15034321, 0.065457657, -0.267493576, 0.00769078406,
        0.0634483546, -0.0521450378, 0.00423761038, -0.00352302147, -0.260096818,
        -0.555040181, -0.140056908, -0.180927768, -0.0400756709, 0.308470815,
        0.177138895, 0.365540922, 0.290202171, -0.248401254, -0.530046821};

    std::stringstream ss((char *)values);
                        //  "I should definitly rework that bad API taking steam as"
                        //  " input... As a matter of fact this makes testing quite"
                        //  " hard as I don't know how to make a suitable stream of"
                        //  " serialized floats in here...");

    cl.loadWeights(ss);

    const std::vector<float> &output = cl.forward(input);

    std::vector<float> expected_output = { 7.45819092, 17.1222115, 30.8645554, 44.6068993,
                    58.3492508, 72.0915985, 85.833931 , 99.5762863, 113.318619, 82.0156326,
                    10.608613 , 27.6484375, 50.8512878, 74.0541306, 97.2569809, 120.459831,
                    143.662643, 166.865509, 190.068329, 136.721619, 10.608613 , 27.6484375,
                    50.8512878, 74.0541306, 97.2569809, 120.459831, 143.662643, 166.865509,
                    190.068329, 136.721619, 10.608613 , 27.6484375, 50.8512878, 74.0541306,
                    97.2569809, 120.459831, 143.662643, 166.865509, 190.068329, 136.721619,
                    10.608613 , 27.6484375, 50.8512878, 74.0541306, 97.2569809, 120.459831,
                    143.662643, 166.865509, 190.068329, 136.721619, 10.608613 , 27.6484375,
                    50.8512878, 74.0541306, 97.2569809, 120.459831, 143.662643, 166.865509,
                    190.068329, 136.721619, 10.608613 , 27.6484375, 50.8512878, 74.0541306,
                    97.2569809, 120.459831, 143.662643, 166.865509, 190.068329, 136.721619,
                    10.608613 , 27.6484375, 50.8512878, 74.0541306, 97.2569809, 120.459831,
                    143.662643, 166.865509, 190.068329, 136.721619, 10.608613 , 27.6484375,
                    50.8512878, 74.0541306, 97.2569809, 120.459831, 143.662643, 166.865509,
                    190.068329, 136.721619, 8.43534374, 20.4147797, 36.6387444, 52.8627052,
                    69.0866776, 85.3106384, 101.534599, 117.758575, 133.982544, 95.3896408,
                    4.69572067, 12.8204374, 21.770031 , 30.7196159, 39.6692238, 48.6188126,
                    57.568409 , 66.5179749, 75.4675903, 25.7058029, 7.48803759, 19.4178085,
                    35.2884827, 51.159153 , 67.0298157, 82.9004974, 98.7711563, 114.64183 ,
                    130.512527, 59.7486496, 7.48803759, 19.4178085, 35.2884827, 51.159153,
                    67.0298157, 82.9004974, 98.7711563, 114.64183, 130.512527, 59.7486496,
                    7.48803759, 19.4178085, 35.2884827, 51.159153 , 67.0298157, 82.9004974,
                    98.7711563, 114.64183 , 130.512527, 59.7486496, 7.48803759, 19.4178085,
                    35.2884827, 51.159153, 67.0298157, 82.9004974, 98.7711563, 114.64183,
                    130.512527, 59.7486496, 7.48803759, 19.4178085, 35.2884827, 51.159153 ,
                    67.0298157, 82.9004974, 98.7711563, 114.64183 , 130.512527, 59.7486496,
                    7.48803759, 19.4178085, 35.2884827, 51.159153, 67.0298157, 82.9004974,
                    98.7711563, 114.64183, 130.512527, 59.7486496, 7.48803759, 19.4178085,
                    35.2884827, 51.159153 , 67.0298157, 82.9004974, 98.7711563, 114.64183 ,
                    130.512527, 59.7486496, 7.48803759, 19.4178085, 35.2884827, 51.159153,
                    67.0298157, 82.9004974, 98.7711563, 114.64183, 130.512527, 59.7486496,
                    7.82524347, 20.441082, 40.3701553, 60.2992249, 80.2282867, 100.157379,
                    120.086441, 140.015503, 159.944595, 89.8670654 };

    EXPECT_EQ(expected_output.size(), output.size());

    EXPECT_EQ(expected_output, output);
}

TEST(Layers, Maxpool) {
    yolo::MaxpoolLayer ml(2, 2, 0);

    ml.setInputFormat(yolo::Format(10, 10, 2, 1));


    std::vector<float> expected_output = { 1, 3, 5, 7, 9, 1, 3, 5, 7, 9,
                                           1, 3, 5, 7, 9, 1, 3, 5, 7, 9,
                                           1, 3, 5, 7, 9, 1, 3, 5, 7, 9,
                                           1, 3, 5, 7, 9, 1, 3, 5, 7, 9,
                                           1, 3, 5, 7, 9, 1, 3, 5, 7, 9 };

    const std::vector<float> &output = ml.forward(input);

    EXPECT_EQ(expected_output.size(), output.size());

    EXPECT_EQ(expected_output, output);
}

